diff --git a/node_modules/react-native-pager-view/android/src/main/java/com/reactnativepagerview/event/PageSelectedEvent.kt b/node_modules/react-native-pager-view/android/src/main/java/com/reactnativepagerview/event/PageSelectedEvent.kt
index e5adccc..01ca368 100644
--- a/node_modules/react-native-pager-view/android/src/main/java/com/reactnativepagerview/event/PageSelectedEvent.kt
+++ b/node_modules/react-native-pager-view/android/src/main/java/com/reactnativepagerview/event/PageSelectedEvent.kt
@@ -4,7 +4,7 @@ import com.facebook.react.bridge.Arguments
 import com.facebook.react.bridge.WritableMap
 import com.facebook.react.uimanager.events.Event
 import com.facebook.react.uimanager.events.RCTEventEmitter
-
+import com.facebook.react.uimanager.events.RCTModernEventEmitter
 
 /**
  * Event emitted by [ReactViewPager] when selected page changes.
@@ -12,17 +12,33 @@ import com.facebook.react.uimanager.events.RCTEventEmitter
  * Additional data provided by this event:
  * - position - index of page that has been selected
  */
-class PageSelectedEvent(viewTag: Int, private val mPosition: Int) : Event<PageSelectedEvent>(viewTag) {
+class PageSelectedEvent(viewTag: Int, private val mPosition: Int) :
+    Event<PageSelectedEvent>(viewTag) {
+
     override fun getEventName(): String {
         return EVENT_NAME
     }
 
     override fun canCoalesce(): Boolean {
-      return false
+        return false
     }
 
+    @Suppress("DEPRECATION")
     override fun dispatch(rctEventEmitter: RCTEventEmitter) {
-        rctEventEmitter.receiveEvent(viewTag, eventName, serializeEventData())
+        val eventData = serializeEventData()
+
+        // Nếu Fabric → dùng RCTModernEventEmitter
+        val modernEmitter = rctEventEmitter as? RCTModernEventEmitter
+        if (modernEmitter != null) {
+            modernEmitter.receiveEvent(
+                surfaceId,
+                viewTag,
+                eventName,
+                eventData
+            )
+        } else {
+            rctEventEmitter.receiveEvent(viewTag, eventName, eventData)
+        }
     }
 
     private fun serializeEventData(): WritableMap {
@@ -34,5 +50,4 @@ class PageSelectedEvent(viewTag: Int, private val mPosition: Int) : Event<PageSe
     companion object {
         const val EVENT_NAME = "topPageSelected"
     }
-
 }
